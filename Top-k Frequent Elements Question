// Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.


class Solution {
    public int[] topKFrequent(int[] nums, int k) {
       int n = nums.length;
       List<Integer>[] arr = new List[n+1];
       Map<Integer, Integer> frequencyMap = new HashMap<>();
       for(int var : nums){
           frequencyMap.put(var, frequencyMap.getOrDefault(var, 0)+1);
           // .getOrDefault method will get the frequency value at key 'var'(if exists) and increment the frequency count.
           // If the there is no value then it returns 0+1, i.e., it sets the frequency value to 1 and then the put method
           // puts the key(var)-value(frequency) pair inside the HashMap.
       }
       for(int key : frequencyMap.keySet()){   // we iterate the keys in the hashmap
           int frequency = frequencyMap.get(key);  // the value at key gets stored int the 'frequency' variable
           if(arr[frequency] == null){   // if there is no value stored in the array arr at the index 'frequency'
               arr[frequency] = new ArrayList<>(); // then a new array list is created at that index
           }
           arr[frequency].add(key);  // else, the value of the variable 'key' is added at the index 'frequency' of the array arr
       }
       int[] result = new int[k];
       int count = 0;
       for(int i=arr.length-1 ; i>=0; i--){   // iterating the array arr in which the keys are stored on the indexes 'frequency'
           if(arr[i]!=null && count<k){ 
               for(int j : arr[i]){
                   result[count] = j;  // value inside the not null index of the array arr gets added to the result array
                   count++; // count is incremented so that only loop stops when count<k
               }
           }
       }
       return result; 
    }
}
