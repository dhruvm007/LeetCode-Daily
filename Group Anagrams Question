// Given an array of strings strs, group the anagrams together. You can return the answer in any order.
// An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.


class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> mymap = new HashMap<>();
        for(String str : strs){
            char[] ch = str.toCharArray();  //creates an array of the word str
            Arrays.sort(ch);   // sorts the characters in the array in a-z order
            String ordered = new String(ch);  //creates a new string of the sorted order
            if(mymap.containsKey(ordered)){   // checks if map contains the key or not
                mymap.get(ordered).add(str);  // if map contains key then adds the respective string to that key
            }
            else{
                List<String> newList = new ArrayList<>();  // if map doesn't contain key then it creates a new array list
                newList.add(str);                          // of the string and adds it as a new key value pair in the map
                mymap.put(ordered, newList);
            }
        }
        return new ArrayList<>(mymap.values());  // returns the array list containing map values
    }
}

// getFrequency method is used to maintain the count of each character in the string
